// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 effective-4.2 (swiftlang-1200.0.28.1 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-tvos13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name InnovidAdRenderer
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import CoreGraphics
import CoreMedia
import CoreText
import Foundation
import Swift
import UIKit
import os
@_hasMissingDesignatedInitializers final public class FontBlaster {
  public static var debugEnabled: Swift.Bool
  public static var loadedFonts: [Swift.String]
  final public class func blast(bundle: Foundation.Bundle = Bundle.main)
  final public class func blast(bundle: Foundation.Bundle = Bundle.main, completion handler: (([Swift.String]) -> Swift.Void)?)
  @objc deinit
}
@objc public protocol InnovidAdRenderer {
  @objc func play(presentingViewController: UIKit.UIViewController)
  @objc func stop()
  @objc func onSSAIAdPlayback(remainingTime: Foundation.TimeInterval, duration: Foundation.TimeInterval)
}
@objc public protocol InnovidDelegate {
  @objc optional func innovid(onVideoEvent event: VideoEvent, videoName: Swift.String, value: Swift.String?)
  @objc optional func innovid(onLifecycleEvent event: LifecycleEvent, value: Swift.String?)
  @objc optional func innovid(onInteractionEvent event: InteractionEvent, value: Swift.String?)
}
@objc public enum LifecycleEvent : Swift.Int {
  case start
  case impression
  case cancel
  case fail
  case complete
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VideoEvent : Swift.Int {
  case start
  case firstQuartile
  case midpoint
  case thirdQuartile
  case complete
  case progress
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum InteractionEvent : Swift.Int {
  case acceptInvitation
  case expand
  case collapse
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol InnovidAdRendererDelegate : AnyObject {
  @objc func innovidDidComplete(timeSpent: Foundation.NSNumber?)
  @objc func innovidUserDidCancelStream()
  @objc func innovidDidFail(_ error: Swift.String)
  @objc optional func innovidDidStart()
  @objc optional func innovidUserDidOptIn()
  @objc optional func innovidUserDidOptOut()
  @objc optional func innovidUserDidTimeout()
  @objc optional func innovidUserDidCancelInteractiveAd()
  @objc optional func innovidUserDidAchieveCredit()
}
extension AVPlayer.Status : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AVPlayer.TimeControlStatus : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AVPlayer.WaitingReason : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AVPlayerItem.Status : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AVPlayer {
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
}
extension AVURLAsset {
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
}
extension AVPlayerItem {
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers public class InnovidProvider : ObjectiveC.NSObject {
  @objc public static func instantiateSSAI(adURI: Swift.String, delegate: InnovidDelegate?, showName: Swift.String? = nil, showGenre: Swift.String? = nil) -> InnovidAdRenderer
  @objc public static func instantiate(adURI: Swift.String, delegate: InnovidDelegate?, showName: Swift.String? = nil, showGenre: Swift.String? = nil) -> InnovidAdRenderer
  @objc public static func instantiate(adURI: Swift.String, params: InnovidAdRendererParams, delegate: InnovidAdRendererDelegate) -> InnovidAdRenderer
  @objc public static func instantiate(adURI: Swift.String, params: InnovidAdRendererParams, delegate: InnovidAdRendererDelegate, isAdURIJSON: Swift.Bool = false) -> InnovidAdRenderer
  @objc deinit
  @objc override dynamic public init()
}
@objc public class InnovidAdRendererParams : ObjectiveC.NSObject {
  @objc public enum ProductType : Swift.Int, Swift.RawRepresentable {
    case none
    case sponsoredStream
    case sponsoredAdBreak
    case continueProduct
    case streamPass
    public typealias RawValue = Swift.String
    public var rawValue: InnovidAdRendererParams.ProductType.RawValue {
      get
    }
    public init?(rawValue: InnovidAdRendererParams.ProductType.RawValue?)
    public init?(rawValue: InnovidAdRendererParams.ProductType.RawValue)
  }
  @objc public enum Renderer : Swift.Int, Swift.RawRepresentable {
    case iRoll
    case trueX
    case ssai
    case live
    public typealias RawValue = Swift.String
    public var rawValue: InnovidAdRendererParams.Renderer.RawValue {
      get
    }
    public init?(rawValue: InnovidAdRendererParams.Renderer.RawValue)
  }
  public var product: InnovidAdRendererParams.ProductType
  public var position: Swift.String?
  public var showSkipCardImmediately: Swift.Bool
  public var episodeThumbnailImageURI: Swift.String?
  public var episodeName: Swift.String?
  public var interactiveAdTimeRequiredSeconds: Swift.Int
  public var skipCardImageURI: Swift.String?
  public var autoAdvanceTimerSeconds: Swift.Int?
  public var choiceCardButtonDelayTimeInterval: Foundation.TimeInterval?
  public var choiceCardBackgroundImageURI: Swift.String?
  public var choiceCardBackgroundVideoURI: Swift.String?
  public var choiceCardVoiceoverURI: Swift.String?
  public var choiceCardInteractButton: ChoiceCardButton?
  public var choiceCardWatchButton: ChoiceCardButton?
  public var streamPassRedeemPixelURI: Swift.String?
  public var surveyConfigURI: Swift.String?
  public var podIndex: Swift.Int
  public var trueXURI: Swift.String?
  public var trueXParams: Swift.String?
  public var showName: Swift.String?
  public var showGenre: Swift.String?
  public var liveAdSlotStartDate: Foundation.Date?
  public var liveAdDuration: Foundation.TimeInterval
  @objc convenience public init(product: InnovidAdRendererParams.ProductType, showSkipCardImmediately: Swift.Bool = false, episodeThumbnailImageURI: Swift.String? = nil, episodeName: Swift.String? = nil, interactiveAdTimeRequiredSeconds: Swift.Int, skipCardImageURI: Swift.String? = nil, autoAdvanceTimerSeconds: Swift.Int = -1, choiceCardBackgroundImageURI: Swift.String? = nil, choiceCardBackgroundVideoURI: Swift.String? = nil, choiceCardVoiceoverURI: Swift.String! = nil, choiceCardInteractButton: ChoiceCardButton? = nil, choiceCardWatchButton: ChoiceCardButton? = nil, choiceCardButtonDelayTimeInterval: Foundation.TimeInterval = -1, streamPassRedeemPixelURI: Swift.String? = nil, surveyConfigURI: Swift.String? = nil, podIndex: Swift.Int = 1, trueXURI: Swift.String? = nil, trueXParams: Swift.String? = nil)
  @objc convenience public init(liveAdSlotStartDate: Foundation.Date, liveAdDuration: Foundation.TimeInterval)
  @objc required public init(renderer: InnovidAdRendererParams.Renderer = .trueX, product: InnovidAdRendererParams.ProductType = .sponsoredStream, position: Swift.String? = nil, showSkipCardImmediately: Swift.Bool = false, episodeThumbnailImageURI: Swift.String? = nil, episodeName: Swift.String? = nil, interactiveAdTimeRequiredSeconds: Swift.Int = 30, skipCardImageURI: Swift.String? = nil, autoAdvanceTimerSeconds: Swift.Int = -1, choiceCardBackgroundImageURI: Swift.String? = nil, choiceCardBackgroundVideoURI: Swift.String? = nil, choiceCardVoiceoverURI: Swift.String? = nil, choiceCardInteractButton: ChoiceCardButton? = nil, choiceCardWatchButton: ChoiceCardButton? = nil, choiceCardButtonDelayTimeInterval: Foundation.TimeInterval = -1, streamPassRedeemPixelURI: Swift.String? = nil, surveyConfigURI: Swift.String? = nil, podIndex: Swift.Int = 1, trueXURI: Swift.String? = nil, trueXParams: Swift.String? = nil, showName: Swift.String? = nil, showGenre: Swift.String? = nil, liveAdSlotStartDate: Foundation.Date? = nil, liveAdDuration: Foundation.TimeInterval = -1)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ChoiceCardButton : ObjectiveC.NSObject {
  @objc public init(x: Swift.Int, y: Swift.Int, imageURI: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension LifecycleEvent : Swift.Equatable {}
extension LifecycleEvent : Swift.Hashable {}
extension LifecycleEvent : Swift.RawRepresentable {}
extension VideoEvent : Swift.Equatable {}
extension VideoEvent : Swift.Hashable {}
extension VideoEvent : Swift.RawRepresentable {}
extension InteractionEvent : Swift.Equatable {}
extension InteractionEvent : Swift.Hashable {}
extension InteractionEvent : Swift.RawRepresentable {}
extension InnovidAdRendererParams.ProductType : Swift.Equatable {}
extension InnovidAdRendererParams.ProductType : Swift.Hashable {}
extension InnovidAdRendererParams.Renderer : Swift.Equatable {}
extension InnovidAdRendererParams.Renderer : Swift.Hashable {}
